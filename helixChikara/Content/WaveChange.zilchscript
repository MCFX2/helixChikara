class WaveChange : ZilchComponent {
  
  var TUTORIAL_WAVE_COUNT : Integer = 3;
  [Property] var InTime : Real = 0.7;
  [Property] var OutTime : Real = 0.7;
  [Property] var HoldTime : Real = 1.0;
  [Property] var TransType : Ease;
  
  [Property] var Ones : CogPath;
  [Property] var Tens : CogPath;
  
  var WaveOnes : Integer = 0;
  var WaveTens : Integer = 0;
  
  var XEdge : Real = 25;
  var YEdge : Real = 25;
  var R : Random = Random();
  
  var RealWave : Integer = 0;
    
  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Space, Events.LogicUpdate, this.ChangeWave);
    
    var xdir = this.R.DieRoll(3) - 2;
    var ydir = this.R.DieRoll(3) - 2;
    if(xdir == 0 && ydir == 0) xdir = 1; //prevent bug
    
    this.Owner.Transform.Translation = Real3(this.XEdge * xdir, this.YEdge * ydir, this.Owner.Transform.Translation.Z);
    
    var seq = Actions.Sequence(this.Owner.Actions);
    
    Actions.Property(seq,
    @this.Owner.Transform.Translation,
    Real3(0, 5, this.Owner.Transform.Translation.Z),
    this.InTime,
    this.TransType);
    
    Actions.Delay(seq, this.HoldTime);
    
    Actions.Property(seq,
    @this.Owner.Transform.Translation,
    Real3(-1 * this.XEdge * xdir, -1 * this.YEdge * ydir, this.Owner.Transform.Translation.Z),
    this.OutTime,
    this.TransType);
    
    Actions.Call(seq, this.Owner.Destroy);
    
    }
    
    function IntToFont(int : Integer) : SpriteSource{
      if(int == 0) return SpriteSource.Number000;
      if(int == 1) return SpriteSource.Number001;
      if(int == 2) return SpriteSource.Number002;
      if(int == 3) return SpriteSource.Number003;
      if(int == 4) return SpriteSource.Number004;
      if(int == 5) return SpriteSource.Number005;
      if(int == 6) return SpriteSource.Number006;
      if(int == 7) return SpriteSource.Number007;
      if(int == 8) return SpriteSource.Number008;
      if(int == 9) return SpriteSource.Number009;
      
      return SpriteSource.Button_reg; //obvious error sprite
    }
  
  function ChangeWave(event : UpdateEvent) {
    
    this.RealWave = this.Owner.GameSession.GlobalVariables.CurrentWave - this.TUTORIAL_WAVE_COUNT + 1;
    this.WaveTens = this.RealWave / 10;
    this.WaveOnes = this.RealWave - this.WaveTens;
    
    this.Ones.Sprite.SpriteSource = this.IntToFont(this.WaveOnes);
    this.Tens.Sprite.SpriteSource = this.IntToFont(this.WaveTens);
    
    //this.Owner.SpriteText.Text = "Wave `this.GameSession.GlobalVariables.CurrentWave-this.TUTORIAL_WAVE_COUNT+1`";
    
  }


}
