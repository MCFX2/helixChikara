class EnemyTakeDamage : ZilchComponent {
  
  [Dependency] var Transform : Transform;
  [Dependency] var RigidBody : RigidBody;
  
  [Property] var Health : Real = 5.0;
  [Property] var ScoreIncrease : Integer = 1000;
  
  var Iterations : Integer = 0;
  var PointPopUp : Cog;
  
  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollide);
  }
  
  function SpawnParticles (coords : Real3) {
    var angle : Real = 0;
    var ex : Cog = null;
    var magRand : Random = Random();
    var mag : Real = 0;
    for (var i : Integer = 0; i<24; ++i) {
      mag = magRand.Range(1, 15);
      angle+=(i*(Math.Pi/12));
      ex = this.Space.CreateAtPosition(Archetype.EnemyExplosion, coords);
      ex.RigidBody.Velocity = Real3(mag*Math.Cos(angle), mag*Math.Sin(angle), 0);
    }
  }
  
  function OnCollide(event : CollisionEvent){
    if(event.OtherObject.Collider.CollisionGroup == CollisionGroup.PlayerBullet ||
        event.OtherObject.Collider.CollisionGroup == CollisionGroup.KillEverything){
      
      //first check what type of bullet it was and apply the corresponding damage
      if(event.OtherObject.Archetype == Archetype.AnimeBullet){
        this.Health -= 0.5;
        this.Owner.SimpleSound.Play();
      }
      else if(event.OtherObject.Archetype == Archetype.MachoShrapnel){
        this.Health -= 1;
        this.Owner.SimpleSound.Play();
      }
      else if(event.OtherObject.Archetype == Archetype.RandallBullet){
        this.Health -= 0.09; //not kidding
        this.Owner.SimpleSound.Play();
      }
      
      //next apply feedback effects here (blinking/whatever)
      
      
      
      
      //finally,
      if(this.Health <= 0){
        //On-death effects here
        var coords : Real3 = this.Owner.Transform.Translation;
        this.Owner.Destroy();
        this.GameSession.GlobalVariables.AddToScore(this.ScoreIncrease);
        this.Space.CreateAtPosition(Archetype.PointPopUp, coords);
        this.SpawnParticles(coords);
      }
    }
  }
}
