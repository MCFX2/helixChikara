class EnemyTakeDamage : ZilchComponent {
  
  [Dependency] var Transform : Transform;
  [Dependency] var RigidBody : RigidBody;
  
  var PostInit : Boolean = false;
  
  [Property] var Health : Real = 5.0;
  var MaxHP : Real = 5.0;
  [Property] var ScoreIncrease : Integer = 1000;
  [Property] var IsTutorial : Boolean = false;
  [Property] var FlashingColor : Real4 = Real4(255, 0, 0, 1.0);
  
  [Property] var BombWeakness = 1.0;
  
  var Iterations : Integer = 0;
  var PointPopUp : Cog;
  var IsHit : Boolean = false;
  var InitialColor : Real4;

  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollide);
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    this.InitialColor = this.Owner.Sprite.VertexColor;

  }
  
  function SpawnParticles (coords : Real3) {
    var angle : Real = 0;
    var ex : Cog = null;
    var magRand : Random = Random();
    var mag : Real = 0;
    for (var i : Integer = 0; i<24; ++i) {
      mag = magRand.Range(1, 15);
      angle+=(i*(Math.Pi/12));
      this.Space.CreateAtPosition(Archetype.EnemyExplosion, coords)
      .RigidBody.Velocity = Real3(mag*Math.Cos(angle), mag*Math.Sin(angle), 0);
    }
  }
  
  function HandleAnimationChange() {
    var archetype = this.Owner.Archetype;
    var currentFrame : Integer = this.Owner.Sprite.CurrentFrame;
    if (archetype == Archetype.BurstEnemy) {
      this.Owner.Sprite.SpriteSource = SpriteSource.Enemy1_feedback;
    } else if (archetype == Archetype.BasicEnemy) {
      this.Owner.Sprite.SpriteSource = SpriteSource.Enemy2_feedback;
    } else if (archetype == Archetype.SpreadingEnemy) {
      this.Owner.Sprite.SpriteSource = SpriteSource.Enemy3_feedback;
    } else if (archetype == Archetype.TrackerEnemy) {
      this.Owner.Sprite.SpriteSource = SpriteSource.Enemy4_feedback;
    }
    this.Owner.Sprite.VertexColor = this.FlashingColor;
    this.Owner.Sprite.CurrentFrame = currentFrame;
    if (!this.IsHit) this.IsHit = true;

  }
  
  function OnCollide(event : CollisionEvent){
    if(this.Owner.EnemySpawnComponenent.CanTakeDamage) {
      if(event.OtherObject.Collider.CollisionGroup == CollisionGroup.PlayerBullet ||
          event.OtherObject.Collider.CollisionGroup == CollisionGroup.KillEverything){
        
        //first check what type of bullet it was and apply the corresponding damage
        if(event.OtherObject.Archetype == Archetype.AnimeBullet){
          this.Health -= 0.5;
          this.Owner.SimpleSound.Play();
        }
        else if(event.OtherObject.Archetype == Archetype.MachoShrapnel){
          this.Health -= this.BombWeakness;
          this.Owner.SimpleSound.Play();
        }
        else if(event.OtherObject.Archetype == Archetype.RandallBullet){
          this.Health -= 0.09; //not kidding
          this.Owner.SimpleSound.Play();
        }
        
        //next apply feedback effects here (blinking/whatever)
        
        this.HandleAnimationChange();
        
        //finally,
        if(this.Health <= 0){
          //On-death effects here
          var coords : Real3 = this.Owner.Transform.Translation;
          this.Owner.Destroy();
          this.SpawnParticles(coords);
          this.Space.GameSession.GlobalVariables.AddToScore(this.ScoreIncrease);
          ++this.Space.GameSession.GlobalVariables.EnemiesKilled;
          var pointThing = this.Space.CreateAtPosition(Archetype.PointPopUp, coords);
          Actions.Property(pointThing.Actions, @pointThing.Transform.Translation, Real3(coords.X, coords.Y + 1, coords.Z), 1, Ease.Linear);
          
          
        }
      }
    }
  }
  
  function OnLogicUpdate (event : UpdateEvent) {
    if(!this.PostInit){
      this.MaxHP = this.Health;
      this.PostInit = true;
    }
    if (this.IsHit) {
      ++this.Iterations;
      if (this.Iterations <= 20) {
        if (this.Iterations%4==0 && this.Iterations%8!=0) {
          this.Owner.Sprite.VertexColor = this.InitialColor;
        } else if (this.Iterations%8==0) {
          this.Owner.Sprite.VertexColor = this.FlashingColor;
        }
      }
      if (this.Iterations == 40) {
        var archetype = this.Owner.Archetype;
        var currentFrame : Integer = this.Owner.Sprite.CurrentFrame;
        if (archetype == Archetype.BurstEnemy) {
          this.Owner.Sprite.SpriteSource = SpriteSource.Enemy1_0;
        } else if (archetype == Archetype.BasicEnemy) {
          this.Owner.Sprite.SpriteSource = SpriteSource.Enemy2_0;
        } else if (archetype == Archetype.SpreadingEnemy) {
          this.Owner.Sprite.SpriteSource = SpriteSource.Enemy3;
        } else if (archetype == Archetype.TrackerEnemy) {
          this.Owner.Sprite.SpriteSource = SpriteSource.Enemy4;
        }
        this.Owner.Sprite.VertexColor = this.InitialColor;
        this.Owner.Sprite.CurrentFrame = currentFrame;
        this.IsHit = false;
        this.Iterations = 0;
      }
    }
  }
  
}
