class PlayerShooting : ZilchComponent
{
  //keys
  [Property] var ShootKey : Keys = Keys.Space;
  [Property] var AnimeShipKey : Keys = Keys.One;
  //[Property] var MachoCheeseShipKey : Keys = Keys.Two;
  //RIP Macho Cheese
  [Property] var ReaganShipKey : Keys = Keys.Two;
  [Property] var ScoutShipKey : Keys = Keys.Three;
  
  //bullet physics
  [Property] var BulletSpawnOffset = Real2(1.5, 0); //Bullet creation position relative to ship X, Y
  [Property] var BulletSpeedAnime = 5;
  [Property] var BulletFireDelayAnime = 6; //number of logic ticks between reloads
  [Property] var BulletSpreadAnime = 0.02; //ratio of bullet spread. 0 = laser, 1 = 180 degree firing range
  
  [Property] var MachoBombFireDelay = 240;
  [Property] var MachoBombVelocity = 5;
  
  [Property] var RandalFireDelay = 4;
  [Property] var RandalFireSpeed = 8;  
  [Property] var WaveController : CogPath;
  [Property] var HUDBar : CogPath;
  
  var Controller : Gamepad;
  
  var TimeSinceLastBullet = 0;
  var BombCooldown = 0;
  var CurrentShip : Ship = Ship.Anime;
  
  var Rand : Random = Random();
    
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    this.Controller = Zero.Gamepads.GetGamePad(0);
  }
  
  function GetAngle(v : Real2) : Real{
    var mag : Real = Math.Sqrt(Math.Pow(v.X, 2) + Math.Pow(v.Y, 2));
    var angle = Math.ACos(v.X/mag);
    if (v.Y < 0) angle = (2*Math.Pi)-angle;
    return angle;
  }
  
  function Shoot(){
    if(this.CurrentShip == Ship.Anime){
      if(this.TimeSinceLastBullet >= this.BulletFireDelayAnime){
        var currentBullet : Cog = this.Space.CreateAtPosition(Archetype.AnimeBullet, this.Owner.Transform.Translation + Real3(this.BulletSpawnOffset, 0));
        //Y=Speed^2 * sin(ang)
        var spreadAngle = this.Rand.Range(-90, 90) * this.BulletSpreadAnime;
        var velY = Math.Pow(this.BulletSpeedAnime, 2) * Math.Sin(Math.ToRadians(spreadAngle));
        var velX = Math.Pow(this.BulletSpeedAnime, 2) * Math.Cos(Math.ToRadians(spreadAngle));
        currentBullet.RigidBody.Velocity = Real3(velX, velY, 0);
        //Note that bullets are intentionally NOT made children of Screen, so if the level changes direction bullets don't follow. Realism!
        this.TimeSinceLastBullet = 0;
        this.HUDBar.CurrentPlayerIndicator.AngleGun(0);
      }
    }
    else if (this.CurrentShip == Ship.Reagan){
      if(this.BombCooldown >= this.MachoBombFireDelay){
        var currentBullet = this.Space.CreateAtPosition(Archetype.MachoBomb, this.Owner.Transform.Translation + Real3(this.BulletSpawnOffset, 0));
        currentBullet.RigidBody.Velocity = Real3(this.MachoBombVelocity, 0, 0);
        this.TimeSinceLastBullet = 0;
        this.BombCooldown = 0;
        this.HUDBar.CurrentPlayerIndicator.DisarmHUD();
        this.HUDBar.CurrentPlayerIndicator.AngleGun(0);
      }
    }
    else if (this.CurrentShip == Ship.Scout){
      if(this.TimeSinceLastBullet >= this.RandalFireDelay){
        var currentBullet = this.Space.CreateAtPosition(Archetype.RandallBullet, this.Owner.Transform.Translation + Real3(this.BulletSpawnOffset, 0));
        //if(this.WaveController.WaveSpawner.CurrentEnemies == Array[Cog](){}) return;
        var nearestEnemyPos = Math.Distance(this.WaveController.WaveSpawner.CurrentEnemies[0].Transform.Translation, this.Owner.Transform.Translation);
        var nearestEnemy = this.WaveController.WaveSpawner.CurrentEnemies[0];
        
        foreach(var enemy in this.WaveController.WaveSpawner.CurrentEnemies){
          if(Math.Distance(this.Owner.Transform.Translation, enemy.Transform.Translation) < nearestEnemyPos){
            nearestEnemy = enemy;
          }
        }
        var bulletPos = this.Owner.Transform.Translation + Real3(this.BulletSpawnOffset, 0);
        var targetPos = nearestEnemy.Transform.Translation;
        
        //ripped from basic enemy bullet script
        var x = Math.Abs(targetPos.X - bulletPos.X);
        var y = Math.Abs(targetPos.Y - bulletPos.Y);
        
        var xdirection = 0;
        if(targetPos.X > bulletPos.X) { xdirection = 1; }
        else { xdirection = -1; }
        var ydirection = 0;
        if(targetPos.Y > bulletPos.Y) { ydirection = 1; }
        else { ydirection = -1; }
        var dx : Real = y/x;
        var newVel = Math.Normalize(Real2(xdirection, dx * ydirection));
        currentBullet.RigidBody.Velocity = Real3(newVel * this.RandalFireSpeed, 0);
        currentBullet.Orientation.LookAtPoint(targetPos);
        this.HUDBar.CurrentPlayerIndicator.AngleGun(this.GetAngle(currentBullet.RigidBody.Velocity.XY));
        //currentBullet.RigidBody.Velocity 
        this.TimeSinceLastBullet = 0;
      }
    }
  }
  
  function ChangeShip(newShip : Ship){
    if (this.CurrentShip == Ship.Anime) {
      this.HUDBar.CurrentPlayerIndicator.CurrentWeapon = this.HUDBar.CurrentPlayerIndicator.ANIME;
    } else if (this.CurrentShip == Ship.Reagan) {
      this.HUDBar.CurrentPlayerIndicator.CurrentWeapon = this.HUDBar.CurrentPlayerIndicator.REAGAN;
    } else if (this.CurrentShip == Ship.Scout) {
      this.HUDBar.CurrentPlayerIndicator.CurrentWeapon = this.HUDBar.CurrentPlayerIndicator.SCOUT;
    }
    this.HUDBar.CurrentPlayerIndicator.FadeInOut(this.HUDBar.CurrentPlayerIndicator.CurrentWeapon, false);
    this.CurrentShip = newShip;
    if (newShip == Ship.Anime) {
      this.HUDBar.CurrentPlayerIndicator.WeaponSpawnIn = this.HUDBar.CurrentPlayerIndicator.ANIME;
    } else if (newShip == Ship.Reagan) {
      this.HUDBar.CurrentPlayerIndicator.WeaponSpawnIn = this.HUDBar.CurrentPlayerIndicator.REAGAN;
    } else if (newShip == Ship.Scout) {
      this.HUDBar.CurrentPlayerIndicator.WeaponSpawnIn = this.HUDBar.CurrentPlayerIndicator.SCOUT;
    }
  }
  
  
  function CheckKeyboard() { //used for any key inputs that do NOT DIRECTLY affect acceleration
    if(Zero.Keyboard.KeyIsDown(this.ShootKey) && this.Owner.PlayerController.ControlType == ControlTypes.Keyboard){
      this.Shoot();
    }
    if(Zero.Keyboard.KeyIsDown(this.AnimeShipKey)){//TODO. make a single ship key and use WAD/mouse to select a ship to replace from a radial menu (no)
      this.ChangeShip(Ship.Anime);
      //this.HUDCharacterIndicator.CurrentPlayerIndicator.UpdateShipName(Ship.Anime);
    }
    /*if(Zero.Keyboard.KeyIsDown(this.MachoCheeseShipKey)){
      this.ChangeShip(Ship.MachoCheese);
      this.HUDCharacterIndicator.CurrentPlayerIndicator.UpdateShipName(Ship.MachoCheese);
    }*/
    
    //RIP Macho Cheese
    if(Zero.Keyboard.KeyIsDown(this.ReaganShipKey)){
      this.ChangeShip(Ship.Reagan);
      //this.HUDCharacterIndicator.CurrentPlayerIndicator.UpdateShipName(Ship.Reagan);
    }
    if(Zero.Keyboard.KeyIsDown(this.ScoutShipKey)){
      this.ChangeShip(Ship.Scout);
      //this.HUDCharacterIndicator.CurrentPlayerIndicator.UpdateShipName(Ship.Scout);
    }
    
  }
  
  function NextShip() : Ship{
    if(this.CurrentShip == Ship.Anime) return Ship.Reagan;
    if(this.CurrentShip == Ship.Reagan) return Ship.Scout;
    return Ship.Anime;
  }
  
  function PrevShip() : Ship{
    if(this.CurrentShip == Ship.Anime) return Ship.Scout;
    if(this.CurrentShip == Ship.Scout) return Ship.Reagan;
    return Ship.Anime;
  }
    
  function CheckMouse() {
    if(Zero.Mouse.IsButtonDown(MouseButtons.Left) && this.Owner.PlayerController.ControlType == ControlTypes.Mouse) {
        this.Shoot();
    }
  }
  
  function CheckGamepad(){
    
    //any face button shoots
    if(this.Controller.IsButtonHeld(Buttons.A)){
      this.Shoot();
    }
    else if(this.Controller.IsButtonHeld(Buttons.B)){
      this.Shoot();
    }
    else if(this.Controller.IsButtonHeld(Buttons.Y)){
      this.Shoot();
    }
    else if(this.Controller.IsButtonHeld(Buttons.X)){
      this.Shoot();
    }
    
    if(this.Controller.IsButtonPressed(Buttons.RightShoulder)){
      this.ChangeShip(this.NextShip());
    }
    else if (this.Controller.IsButtonPressed(Buttons.LeftShoulder)){
      this.ChangeShip(this.PrevShip());
    }
    
  }

  function OnLogicUpdate(event : UpdateEvent) {
    this.CheckMouse();
    this.CheckKeyboard();
    this.CheckGamepad();
    ++this.TimeSinceLastBullet;
    ++this.BombCooldown;
  }
  
}
