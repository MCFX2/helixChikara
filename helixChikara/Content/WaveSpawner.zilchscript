class WaveSpawner : ZilchComponent
{
  [Property] var VictoryLevel : Level;
  [Property] var WaveHUD : CogPath;
  
  var CurrentWave : Integer = -1; //starts at wave 0 since NextWave() immediately triggers
  var EnemyOffscreenX : Real = 20;
  var TotalWaves = 0;
  var CurrentlyInWave = false;
  
  [Property] var TestArray : Array[Integer] = Array[Integer](){0, 1, 2};
  
  var EnemiesLeft : Integer = 0;
  
  var Waves : Array[Array[Array[Real]]] = Array[Array[Array[Real]]]();
  
  var CurrentEnemies : Array[Cog] = Array[Cog]();
  
  var Wave1 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave2 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave3 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave4 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave5 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave6 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave7 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave8 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave9 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave10 : Array[Array[Real]] = Array[Array[Real]]();
  
  var ENEMYBASIC = 0;
  var ENEMYBURST = 1;
  
  /////////////////
  //no touch zone//
  /////////////////
  
  //TODO: use Actions instead of hard-coded spawning rules
  
  function GetEnemyArchetypeByInt(enemy : Integer) : Archetype{
    if(enemy == this.ENEMYBASIC){
      return Archetype.BasicEnemy;
    } else if (enemy == this.ENEMYBURST){
      return Archetype.BurstEnemy;
    }
    
    else{
        Console.Write("\n\n----------\nATTEMPTED TO EXECUTE GetEnemyArchetypeByInt() WITH UNKNOWN TYPE", enemy, "\n---------\n\n");
        return null;
    }
  }
  
  function RegisterWave(w : Array[Array[Real]]){
    this.Waves.Add(w);
    ++this.TotalWaves;
  }
  
  function AddEnemy(wave : Array[Array[Real]], targetCoords : Real2, enemy : Integer, moveTime : Real, spawnDelay : Integer){
    var orderedArray : Array[Real] = Array[Real](){targetCoords.X, targetCoords.Y, enemy as Integer, moveTime, spawnDelay};
    wave.Add(orderedArray);
  }
  
  function SummonWave(waveNumber : Integer){
    this.CurrentEnemies.Clear();
    foreach(var enemy in this.Waves[waveNumber]){
      //Console.Write("\n",enemy);
      ++this.EnemiesLeft;
      var currentEnemy : Cog = this.Space.CreateAtPosition(this.GetEnemyArchetypeByInt(enemy[2] as Integer), Real3(this.EnemyOffscreenX, enemy[1], 0));
      var distanceX = this.EnemyOffscreenX - enemy[0];
      currentEnemy.RigidBody.Velocity = Real3(-1 * distanceX / enemy[3], 0, 0);
      currentEnemy.EnemySpawnComponenent.TargetPosition = Real2(enemy[0], enemy[1]);
      currentEnemy.EnemySpawnComponenent.WaveController = this.Owner;
      this.CurrentEnemies.Add(currentEnemy);
    }
    this.CurrentlyInWave = true;
    
  }
  
  function NextWave(){
    
    ++this.CurrentWave;
    this.GameSession.GlobalVariables.CurrentWave = this.CurrentWave+1;
    this.Space.CreateAtPosition(Archetype.WaveChange, Real3(0, 2, 1));
    if(this.CurrentWave == this.TotalWaves){
      //"you win" or some shit
      this.Space.LoadLevel(this.VictoryLevel);
    }
    else{
      this.SummonWave(this.CurrentWave);
    }
        
  }
  /////////////////////
  //end no touch zone//
  /////////////////////
  
  function Initialize(init : CogInitializer)
  {
    //add waves to wavetable
    
    this.RegisterWave(this.Wave1);
    this.RegisterWave(this.Wave2);
    this.RegisterWave(this.Wave3);
    this.RegisterWave(this.Wave4);
    this.RegisterWave(this.Wave5);
    this.RegisterWave(this.Wave6);
    this.RegisterWave(this.Wave7);
    this.RegisterWave(this.Wave8);
    this.RegisterWave(this.Wave9);
    this.RegisterWave(this.Wave10);
    
    
    /*
    Current list of enemy IDs for reference:
    
    ENEMYBASIC = basic shooter enemy
    ENEMYBURST = burst-firing enemy
    
    */
    
    //DEPRECATED, use new constants
    
    //this.AddEnemy(this.Wave#, Real2(X, Y), EnemyTypeID, MoveTime, SpawnDelay);
    //Detailed description below
    
    /*
    Real2(X,Y) - target final position for enemy being spawned. Absolute coords.
    EnemyTypeID - see above
    MoveTime - Time in SECONDS to reach target position
    SpawnDelay Time in FRAMES before enemy actually gets spawned (not working right now)
    
    
    */
    //Wave 1 here
   // this.AddEnemy(this.Wave1, Real2(8, 1), 0, 2, 0);
   // this.AddEnemy(this.Wave1, Real2(8, 2), 0, 2, 0);
    this.AddEnemy(this.Wave1, Real2(9, 5), this.ENEMYBURST, 1, 0);
    //this.AddEnemy(this.Wave1, Real2(8, 0), 0, 2, 0);
   // this.AddEnemy(this.Wave1, Real2(8, -1), 0, 2, 0);
    //this.AddEnemy(this.Wave1, Real2(8, -2), 0, 2, 0);
    this.AddEnemy(this.Wave1, Real2(9, -5), this.ENEMYBURST, 1, 0);
    //this.AddEnemy(this.Wave1, Real2(5, 0), 0, 2, 0);
    
    
    //Wave 2 here
    
    this.AddEnemy(this.Wave2, Real2(7, -6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave2, Real2(7, 6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave2, Real2(7, 0), this.ENEMYBURST, 1.5, 0);


//yo wave 3
    
    this.AddEnemy(this.Wave3, Real2(7, -6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave3, Real2(7, 6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave3, Real2(4.5, -6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave3, Real2(4.5, 6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave3, Real2(5.75, 0), this.ENEMYBURST, 1.5, 0);
        
        //YO YO YO WAVE 4 IS A GO
        
    this.AddEnemy(this.Wave4, Real2(3.5, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave4, Real2(5.5, -4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave4, Real2(5.5, 4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave4, Real2(6.5, 0), this.ENEMYBASIC, 1.5, 0);
    //this.AddEnemy(this.Wave4, Real2(4.5, 2), this.ENEMYBURST, 1.5, 0);
    //this.AddEnemy(this.Wave4, Real2(4.5, -2), this.ENEMYBURST, 1.5, 0);
    
    //WAVE 5 time to... dive?
    
    this.AddEnemy(this.Wave5, Real2(7, 6.5), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave5, Real2(7, -6.5), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave5, Real2(7, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave5, Real2(11, 0), this.ENEMYBURST, 1.5, 0);
    
    //wave six, pick up sticks
    
    this.AddEnemy(this.Wave6, Real2(10, 7), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave6, Real2(10, -7), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave6, Real2(13, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave6, Real2(11.5, 3.5), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave6, Real2(11.5, -3.5), this.ENEMYBASIC, 1.5, 0);
    
    //wave seven im in heaven
    
    this.AddEnemy(this.Wave7, Real2(8, 6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave7, Real2(8, 8), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave7, Real2(8, -6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave7, Real2(8, -8), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave7, Real2(9, -7), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave7, Real2(9, 7), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave7, Real2(10, 0), this.ENEMYBURST, 1.5, 0);
    
    //wave 8... weeb b8
    
    this.AddEnemy(this.Wave8, Real2(5, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave8, Real2(6.5, -1.5), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave8, Real2(6.5, 1.5), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave8, Real2(6.5, 0), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave8, Real2(8, 6), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave8, Real2(8, -6), this.ENEMYBURST, 1.5, 0);
    
    //wave 9 just in time
    
    
    this.AddEnemy(this.Wave9, Real2(12, -4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(12, 4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(12, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(9, -4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(9, 4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(9, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(10.5, -2), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave9, Real2(10.5, 2), this.ENEMYBASIC, 1.5, 0);
    
    //wave 10 in da den
    
    this.AddEnemy(this.Wave10, Real2(9, -8), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(9, 8), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(9, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(9, -4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(9, 4), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(9, 0), this.ENEMYBURST, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(13, -6), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(13, 6), this.ENEMYBASIC, 1.5, 0);
    this.AddEnemy(this.Wave10, Real2(13, 0), this.ENEMYBASIC, 1.5, 0);

    
    
    
    //Zero.Connect(this.Space, Events.LogicUpdate, this.CheckWaveCompletion);
    this.CheckWaveCompletion();
  }
  
  function CheckWaveCompletion(){
    if(this.EnemiesLeft == 0){
      this.CurrentlyInWave = false;
      this.NextWave();
    }
  }
  
  function EnemyDestroyed(which : Cog){
    this.CurrentEnemies.RemoveFirst(which);
    --this.EnemiesLeft;
    this.CheckWaveCompletion();
  }
}
