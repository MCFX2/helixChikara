class WaveSpawner : ZilchComponent
{
  [Property] var VictoryLevel : Level;
  [Property] var WaveHUD : CogPath;
  [Property] var Player : CogPath;
  [Property] var ItemSpawn : CogPath;
  
  var BossEncounterNum : Integer = 0;
  
  var CurrentMode : WaveType = WaveType.Normal;
  var CurrentFrame : Integer = 0;
  [Property] var RushModeDelay : Integer = 300;
  var TutController : Cog;
  
  var TUTORIAL_WAVE_COUNT : Integer = 3;
  
  var CurrentWave : Integer = -1; //starts at wave 0 since NextWave() immediately triggers
  var EnemyOffscreenX : Real = 20;
  var TotalWaves = 0;
  var CurrentlyInWave = false;
  
  var LastEnemyCoords : Real2 = Real2(0);
  
  var EnemiesLeft : Integer = 0;
  
  var Waves : Array[Array[Array[Real]]] = Array[Array[Array[Real]]]();
  
  var CurrentEnemies : Array[Cog] = Array[Cog]();
  
  var WaveTutorial1 : Array[Array[Real]] = Array[Array[Real]]();
  var WaveTutorial2 : Array[Array[Real]] = Array[Array[Real]]();
  var WaveTutorial3: Array[Array[Real]] = Array[Array[Real]]();
  
  var Wave1 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave2 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave3 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave4 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave5 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave6 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave7 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave8 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave9 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave10 : Array[Array[Real]] = Array[Array[Real]]();
  
  var Wave11 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave12 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave13 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave14 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave15 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave16 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave17 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave18 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave19 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave20 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave21 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave22 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave23 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave24 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave25 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave26 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave27 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave28 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave29 : Array[Array[Real]] = Array[Array[Real]]();
  var Wave30 : Array[Array[Real]] = Array[Array[Real]]();
  
  var WaveBoss1 : Array[Array[Real]] = Array[Array[Real]]();
  var WaveBoss2 : Array[Array[Real]] = Array[Array[Real]]();
  var WaveBoss3 : Array[Array[Real]] = Array[Array[Real]]();
  

  
  var ENEMYBASIC = 0;
  var ENEMYBURST = 1;
  var ENEMYSPREAD = 2;
  var ENEMYTRACKER = 3;
  var ENEMYNOSHOOT = 4;
  var ENEMYBOSS = 5;
  var ENEMYIMPOSSIBLE = 6;
  
  /////////////////
  //no touch zone//
  /////////////////
  
  
  function GetEnemyArchetypeByInt(enemy : Integer) : Archetype{
    if(enemy == this.ENEMYBASIC){
      return Archetype.BasicEnemy;
    } else if (enemy == this.ENEMYBURST){
      return Archetype.BurstEnemy;
    } else if (enemy == this.ENEMYSPREAD){
      return Archetype.SpreadingEnemy;
    } else if (enemy == this.ENEMYTRACKER){
      return Archetype.TrackerEnemy;
    } else if (enemy == this.ENEMYNOSHOOT){
      return Archetype.NoShootEnemy;
    } else if (enemy == this.ENEMYBOSS){
      return Archetype.BigBoy;
    } else if (enemy == this.ENEMYIMPOSSIBLE){
      return Archetype.ImpossibleEnemy;
    }
    
    else{
        Console.Write("\n\n----------\nATTEMPTED TO EXECUTE GetEnemyArchetypeByInt() WITH UNKNOWN TYPE", enemy, "\n---------\n\n");
        return null;
    }
  }
  
  function RegisterWave(w : Array[Array[Real]]){
    this.Waves.Add(w);
    ++this.TotalWaves;
  }
  
  function AddEnemy(wave : Array[Array[Real]], targetCoords : Real2, enemy : Integer, moveTime : Real, spawnDelay : Integer, health : Real){
    var orderedArray : Array[Real] = Array[Real](){targetCoords.X, targetCoords.Y, enemy as Integer, moveTime, spawnDelay, health};
    wave.Add(orderedArray);
  }
  
  function SummonWave(waveNumber : Integer){
    this.CurrentEnemies.Clear();
    var thisWave = this.Waves[waveNumber];
    var firstEnemy = thisWave[0];
    if(this.GetEnemyArchetypeByInt(firstEnemy[2] as Integer) == Archetype.BigBoy){
      //override for boss waves
        ++this.EnemiesLeft;
        var currentEnemy : Cog = this.Space.CreateAtPosition(this.GetEnemyArchetypeByInt(firstEnemy[2] as Integer), Real3(this.EnemyOffscreenX, firstEnemy[1], 0));
        currentEnemy.EnemySpawnComponenent.ActionData = firstEnemy;
        currentEnemy.EnemyTakeDamage.Health = firstEnemy[5];
        currentEnemy.EnemySpawnComponenent.WaveController = this.Owner; //tell the enemy who the spawn controller is (its us)
        currentEnemy.BigBoyCannon.MaxPhase = this.BossEncounterNum + 2;
        ++this.BossEncounterNum;
        this.CurrentEnemies.Add(currentEnemy); //track the enemy via this table
      
    }
    else{
      foreach(var enemy in this.Waves[waveNumber]){
        ++this.EnemiesLeft;
        var currentEnemy : Cog = this.Space.CreateAtPosition(this.GetEnemyArchetypeByInt(enemy[2] as Integer), Real3(this.EnemyOffscreenX, enemy[1], 0));
        currentEnemy.EnemySpawnComponenent.ActionData = enemy;
        currentEnemy.EnemyTakeDamage.Health = enemy[5];
        currentEnemy.EnemySpawnComponenent.WaveController = this.Owner; //tell the enemy who the spawn controller is (its us)
        this.CurrentEnemies.Add(currentEnemy); //track the enemy via this table
      }
      this.CurrentlyInWave = true;
    }
  }
  
  function WinGame(){
      if(!this.GameSession.MarkedForDestruction){ //fixes annoying editor error
        var victorySpace : Space = this.GameSession.CreateSpace(Archetype.Space);
        this.Space.Destroy();
        victorySpace.LoadLevel(this.VictoryLevel);
      }
    
  }
  
  function NextWave(){
    
    ++this.CurrentWave;
    this.GameSession.GlobalVariables.CurrentWave = this.CurrentWave;
    this.Space.CreateAtPosition(Archetype.WaveChange, Real3(0, 2, 1));
    if(this.Player.WavePerfect.IsPerfect){
      this.ItemSpawn.ItemSpawner.CreatePickup();
    }
    this.Player.WavePerfect.ResetAttempt();
    
    if(this.CurrentWave == this.TotalWaves) this.EnterRushMode();
    else{
      this.SummonWave(this.CurrentWave);
    }
        
  }
  /////////////////////
  //end no touch zone//
  /////////////////////
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    //add waves to wavetable

    
    
    this.RegisterWave(this.WaveTutorial1);
    this.RegisterWave(this.WaveTutorial2);
    this.RegisterWave(this.WaveTutorial3);
        
    //this.RegisterWave(this.Wave1);

    this.RegisterWave(this.Wave2);
    this.RegisterWave(this.Wave4);
    this.RegisterWave(this.Wave5);
    this.RegisterWave(this.Wave6);
    this.RegisterWave(this.Wave7);
    this.RegisterWave(this.Wave8);
    this.RegisterWave(this.Wave9);
    this.RegisterWave(this.Wave10);
    this.RegisterWave(this.Wave11);
  
    this.RegisterWave(this.WaveBoss1);
    
    this.RegisterWave(this.Wave12);
    this.RegisterWave(this.Wave13);
    this.RegisterWave(this.Wave14);
    this.RegisterWave(this.Wave15);
    this.RegisterWave(this.Wave16);
    this.RegisterWave(this.Wave17);
    this.RegisterWave(this.Wave18);
    this.RegisterWave(this.Wave19);
    this.RegisterWave(this.Wave20);
    
    this.RegisterWave(this.WaveBoss2);
 
    this.RegisterWave(this.Wave21);
    this.RegisterWave(this.Wave22);
    this.RegisterWave(this.Wave23);
    this.RegisterWave(this.Wave24);
    this.RegisterWave(this.Wave25);
    this.RegisterWave(this.Wave26);
    this.RegisterWave(this.Wave27);
    
    this.RegisterWave(this.WaveBoss3);
 
 
    //this.AddEnemy(this.Wave#, Real2(X, Y), EnemyTypeID, MoveTime, SpawnDelay);
    //Detailed description below
    
    /*
    Real2(X,Y) - target final position for enemy being spawned. Absolute coords.
    EnemyTypeID - see above
    MoveTime - Time in SECONDS to reach target position
    SpawnDelay Time in FRAMES before enemy actually gets spawned
    
    
    */
        //boss waves
    this.AddEnemy(this.WaveBoss1, Real2(10, 0), this.ENEMYBOSS, 2, 0, 80);
    this.AddEnemy(this.WaveBoss2, Real2(10, 0), this.ENEMYBOSS, 5, 0, 200);
    this.AddEnemy(this.WaveBoss3, Real2(10, 0), this.ENEMYBOSS, 10, 0, 400);
    
    
        
    // Tutorial "Wave" 1
    
    this.AddEnemy(this.WaveTutorial1, Real2(12, -6), this.ENEMYNOSHOOT, 2, 0, 3);
    
    
    // Tutorial "Wave" 2
    
    this.AddEnemy(this.WaveTutorial2, Real2(12, -2), this.ENEMYNOSHOOT, 2, 0, 3);
    this.AddEnemy(this.WaveTutorial2, Real2(12, -3), this.ENEMYNOSHOOT, 2, 0, 3);
    this.AddEnemy(this.WaveTutorial2, Real2(12, -4), this.ENEMYNOSHOOT, 2, 0, 3);
    this.AddEnemy(this.WaveTutorial2, Real2(12, -5), this.ENEMYNOSHOOT, 2, 0, 3);
    this.AddEnemy(this.WaveTutorial2, Real2(12, -6), this.ENEMYNOSHOOT, 2, 0, 3);
    
    
    // Tutorial "Wave" 3
    
    this.AddEnemy(this.WaveTutorial3, Real2(12, -6), this.ENEMYIMPOSSIBLE, 2, 0, 3); // CHANGE
    
    
    //Wave 1 here

    //this.AddEnemy(this.Wave1, Real2(9, 5), this.ENEMYBOSS, 1, 60, 100);
    //this.AddEnemy(this.Wave1, Real2(9, -5), this.ENEMYBOSS, 1, 60, 30);
    //this.AddEnemy(this.Wave1, Real2(9, 0), this.ENEMYTRACKER, 1, 60, 30);
    //Wave 2 here
    
    this.AddEnemy(this.Wave2, Real2(7, -6), this.ENEMYBURST, 1.5, 15, 3);
    this.AddEnemy(this.Wave2, Real2(7, 6), this.ENEMYBURST, 1.5, 15, 3);
    this.AddEnemy(this.Wave2, Real2(7, 0), this.ENEMYBURST, 1.5, 15, 3);


    //yo wave 3
    
    this.AddEnemy(this.Wave3, Real2(7, -6), this.ENEMYBURST, 1.5, 0, 3);
    this.AddEnemy(this.Wave3, Real2(7, 6), this.ENEMYBURST, 1.5, 0, 3);
    this.AddEnemy(this.Wave3, Real2(4.5, -6), this.ENEMYBURST, 1.5, 0, 3);
    this.AddEnemy(this.Wave3, Real2(4.5, 6), this.ENEMYBURST, 1.5, 0, 3);
    this.AddEnemy(this.Wave3, Real2(5.75, 0), this.ENEMYBURST, 1.5, 0, 3);
        
    //YO YO YO WAVE 4 IS A GO
        
    this.AddEnemy(this.Wave4, Real2(3.5, 0), this.ENEMYBURST, 1.5, 10, 3);
    this.AddEnemy(this.Wave4, Real2(5.5, -4), this.ENEMYBURST, 1.5, 15, 3);
    this.AddEnemy(this.Wave4, Real2(5.5, 4), this.ENEMYBURST, 1.5, 15, 3);
    this.AddEnemy(this.Wave4, Real2(6.5, 0), this.ENEMYBASIC, 1.5, 25, 3);
    this.AddEnemy(this.Wave4, Real2(9, 2), this.ENEMYBURST, 1.5, 25, 3);
    this.AddEnemy(this.Wave4, Real2(9, -2), this.ENEMYBURST, 1.5, 25, 3);
    this.AddEnemy(this.Wave4, Real2(10.5, 0), this.ENEMYBASIC, 1.5, 30, 3);
    
    //WAVE 5 time to... dive?
    
    this.AddEnemy(this.Wave5, Real2(7, 6.5), this.ENEMYBASIC, 1.5, 15, 3);
    this.AddEnemy(this.Wave5, Real2(7, -6.5), this.ENEMYBASIC, 1.5, 17, 3);
    this.AddEnemy(this.Wave5, Real2(7, 0), this.ENEMYBURST, 1.5, 14, 3);
    this.AddEnemy(this.Wave5, Real2(8, 3.25), this.ENEMYBURST, 1.5, 21, 3);
    this.AddEnemy(this.Wave5, Real2(9, 0), this.ENEMYBURST, 1.5, 24, 3);
    this.AddEnemy(this.Wave5, Real2(5.5, 3.25), this.ENEMYBURST, 1.5, 10, 3);
    this.AddEnemy(this.Wave5, Real2(5.5, -3.25), this.ENEMYBURST, 1.5, 10, 3);
    this.AddEnemy(this.Wave5, Real2(8, -3.25), this.ENEMYBURST, 1.5, 19, 3);
    this.AddEnemy(this.Wave5, Real2(11, 0), this.ENEMYBASIC, 1.5, 26, 3);
    
    //wave six, pick up sticks
    
    this.AddEnemy(this.Wave6, Real2(10, 7), this.ENEMYBURST, 1.5, 12, 3);
    this.AddEnemy(this.Wave6, Real2(10, -7), this.ENEMYBURST, 1.5, 11, 3);
    this.AddEnemy(this.Wave6, Real2(13, 0), this.ENEMYBURST, 1.5, 23, 3);
    this.AddEnemy(this.Wave6, Real2(11.5, 3.5), this.ENEMYBASIC, 1.5, 17, 3);
    this.AddEnemy(this.Wave6, Real2(11.5, -3.5), this.ENEMYBASIC, 1.5, 18, 3);
    this.AddEnemy(this.Wave6, Real2(11.5, 0), this.ENEMYBURST, 1.5, 14, 3);
    this.AddEnemy(this.Wave6, Real2(10, 0), this.ENEMYBASIC, 1.5, 13, 3);
    this.AddEnemy(this.Wave6, Real2(14, 7), this.ENEMYBASIC, 1.5, 23, 3);
    this.AddEnemy(this.Wave6, Real2(14, -7), this.ENEMYBASIC, 1.5, 24, 3);
    
    //wave seven im in heaven
    
    this.AddEnemy(this.Wave7, Real2(8, 5), this.ENEMYBURST, 1.5, 12, 3);
    this.AddEnemy(this.Wave7, Real2(8, 7), this.ENEMYBURST, 1.5, 11, 3);
    this.AddEnemy(this.Wave7, Real2(8, -5), this.ENEMYBURST, 1.5, 14, 3);
    this.AddEnemy(this.Wave7, Real2(8, -7), this.ENEMYBURST, 1.5, 12, 3);
    this.AddEnemy(this.Wave7, Real2(9, -6), this.ENEMYBASIC, 1.5, 24, 3);
    this.AddEnemy(this.Wave7, Real2(9, 6), this.ENEMYBASIC, 1.5, 22, 3);
    this.AddEnemy(this.Wave7, Real2(10, 0), this.ENEMYBURST, 1.5, 27, 3);
    this.AddEnemy(this.Wave7, Real2(9, 2.5), this.ENEMYBURST, 1.5, 21, 3);
    this.AddEnemy(this.Wave7, Real2(9, -2.5), this.ENEMYBURST, 1.5, 23, 3);
    this.AddEnemy(this.Wave7, Real2(13, 0), this.ENEMYBASIC, 1.5, 31, 3);
    
    //wave 8... weeb b8
    
    this.AddEnemy(this.Wave8, Real2(5, 0), this.ENEMYBURST, 1.5, 5, 3);
    this.AddEnemy(this.Wave8, Real2(6.5, -1.5), this.ENEMYBURST, 1.5, 16, 3);
    this.AddEnemy(this.Wave8, Real2(6.5, 1.5), this.ENEMYBURST, 1.5, 18, 3);
    this.AddEnemy(this.Wave8, Real2(6.5, 0), this.ENEMYBASIC, 1.5, 12, 3);
    this.AddEnemy(this.Wave8, Real2(8, 6), this.ENEMYBURST, 1.5, 21, 3);
    this.AddEnemy(this.Wave8, Real2(8, -6), this.ENEMYBURST, 1.5, 24, 3);
    this.AddEnemy(this.Wave8, Real2(8, 0), this.ENEMYBURST, 1.5, 23, 3);
    this.AddEnemy(this.Wave8, Real2(7, 4), this.ENEMYBASIC, 1.5, 17, 3);
    this.AddEnemy(this.Wave8, Real2(7, -4), this.ENEMYBASIC, 1.5, 18, 3);
    this.AddEnemy(this.Wave8, Real2(9.5, -1.5), this.ENEMYBURST, 1.5, 28, 3);
    this.AddEnemy(this.Wave8, Real2(9.5, 1.5), this.ENEMYBURST, 1.5, 26, 3);
    this.AddEnemy(this.Wave8, Real2(8, 1.5), this.ENEMYBASIC, 1.5, 22, 3);
    this.AddEnemy(this.Wave8, Real2(8, -1.5), this.ENEMYBASIC, 1.5, 21, 3);
    
    //wave 9 just in time
    
    
    this.AddEnemy(this.Wave9, Real2(13, -3), this.ENEMYBURST, 1.5, 22, 3);
    this.AddEnemy(this.Wave9, Real2(13, 3), this.ENEMYBURST, 1.5, 25, 3);
    this.AddEnemy(this.Wave9, Real2(13, 0), this.ENEMYBURST, 1.5, 23, 3);
    this.AddEnemy(this.Wave9, Real2(10.5, 5), this.ENEMYBURST, 1.5, 13, 3);
    this.AddEnemy(this.Wave9, Real2(8, 0), this.ENEMYBURST, 1.5, 7, 3);
    this.AddEnemy(this.Wave9, Real2(10.5, -5), this.ENEMYBURST, 1.5, 12, 3);
    this.AddEnemy(this.Wave9, Real2(10.5, -2), this.ENEMYBASIC, 1.5, 13, 3);
    this.AddEnemy(this.Wave9, Real2(10.5, 2), this.ENEMYBASIC, 1.5, 14, 3);
    this.AddEnemy(this.Wave9, Real2(10.5, 0), this.ENEMYSPREAD, 1.5, 11, 3);

    
    
    //wave 10 in da den
    
    this.AddEnemy(this.Wave10, Real2(9, -7), this.ENEMYBURST, 1.5, 18, 3);
    this.AddEnemy(this.Wave10, Real2(9, 7), this.ENEMYBURST, 1.5, 12, 3);
    this.AddEnemy(this.Wave10, Real2(9, 0), this.ENEMYBURST, 1.5, 16, 3);
    this.AddEnemy(this.Wave10, Real2(9, -4), this.ENEMYBURST, 1.5, 14, 3);
    this.AddEnemy(this.Wave10, Real2(9, 4), this.ENEMYBURST, 1.5, 12, 3);
    this.AddEnemy(this.Wave10, Real2(13, -5.5), this.ENEMYSPREAD, 1.5, 23, 3);
    this.AddEnemy(this.Wave10, Real2(13, 5.5), this.ENEMYSPREAD, 1.5, 33, 3);
    this.AddEnemy(this.Wave10, Real2(13, 0), this.ENEMYBASIC, 1.5, 28, 27);
    this.AddEnemy(this.Wave10, Real2(15.5, 0), this.ENEMYSPREAD, 1.5, 36, 3);


    // the eleventh wave
    
    this.AddEnemy(this.Wave11, Real2(9, 4), this.ENEMYBASIC, 2, 6, 3);
    this.AddEnemy(this.Wave11, Real2(9, -4), this.ENEMYBASIC, 2, 18, 3);
    this.AddEnemy(this.Wave11, Real2(10.5, 7), this.ENEMYBURST, 2, 19, 3);
    this.AddEnemy(this.Wave11, Real2(10.5, -7), this.ENEMYBURST, 2, 14, 3);
    this.AddEnemy(this.Wave11, Real2(10.5, 5), this.ENEMYBURST, 2, 21, 3);
    this.AddEnemy(this.Wave11, Real2(10.5, -5), this.ENEMYBURST, 2, 28, 3);
    this.AddEnemy(this.Wave11, Real2(12, 0), this.ENEMYSPREAD, 2, 31, 3);
    this.AddEnemy(this.Wave11, Real2(12, 0), this.ENEMYSPREAD, 2, 32, 3);
    this.AddEnemy(this.Wave11, Real2(12, 4), this.ENEMYSPREAD, 2, 35, 3);
    this.AddEnemy(this.Wave11, Real2(12, -4), this.ENEMYSPREAD, 2, 24, 3);
    this.AddEnemy(this.Wave11, Real2(9, 0), this.ENEMYBURST, 2, 11, 3);
    this.AddEnemy(this.Wave11, Real2(10.5, -2), this.ENEMYBASIC, 2, 17, 3);
    this.AddEnemy(this.Wave11, Real2(10.5, 2), this.ENEMYBASIC, 2, 18, 3);
    
    
  //  this.AddEnemy(this.Wave11, Real2(0, 0), this.ENEMYSPREAD, 5, 0);
 //   this.AddEnemy(this.Wave11, Real2(5,-8), this.ENEMYBASIC, 2, 0);
  //  this.AddEnemy(this.Wave11, Real2(5,8), this.ENEMYBASIC, 2, 0);
  //  this.AddEnemy(this.Wave11, Real2(5,-7), this.ENEMYBASIC, 2, 20);
 //   this.AddEnemy(this.Wave11, Real2(5,7), this.ENEMYBASIC, 2, 20);
  //  this.AddEnemy(this.Wave11, Real2(5,-6), this.ENEMYBASIC, 2, 40);
   // this.AddEnemy(this.Wave11, Real2(5,6), this.ENEMYBASIC, 2, 40);
  //  this.AddEnemy(this.Wave11, Real2(5,-5), this.ENEMYBASIC, 2, 60);
  //  this.AddEnemy(this.Wave11, Real2(5,5), this.ENEMYBASIC, 2, 60);
 //   this.AddEnemy(this.Wave11, Real2(5,-4), this.ENEMYBASIC, 2, 80);
 //   this.AddEnemy(this.Wave11, Real2(5,4), this.ENEMYBASIC, 2, 80);
  //  this.AddEnemy(this.Wave11, Real2(5,-3), this.ENEMYBASIC, 2, 100);
 //   this.AddEnemy(this.Wave11, Real2(5,3), this.ENEMYBASIC, 2, 100);
 //   this.AddEnemy(this.Wave11, Real2(5,-2), this.ENEMYBASIC, 2, 120);
 //   this.AddEnemy(this.Wave11, Real2(5,2), this.ENEMYBASIC, 2, 120);
  //  this.AddEnemy(this.Wave11, Real2(5,-1), this.ENEMYBASIC, 2, 140);
 //   this.AddEnemy(this.Wave11, Real2(5,1), this.ENEMYBASIC, 2, 140);
 //   this.AddEnemy(this.Wave11, Real2(5,0), this.ENEMYBASIC, 2, 160);
 //   this.AddEnemy(this.Wave11, Real2(8,5), this.ENEMYTRACKER, 4, 10); 
 //   this.AddEnemy(this.Wave11, Real2(8,-5), this.ENEMYTRACKER, 4, 10); 
    
    
    //wave 12
    
    this.AddEnemy(this.Wave12, Real2(7, 0), this.ENEMYSPREAD, 2, 7, 3);
    this.AddEnemy(this.Wave12, Real2(9, -3), this.ENEMYBASIC, 2, 18, 3);
    this.AddEnemy(this.Wave12, Real2(9, 3), this.ENEMYBASIC, 2, 19, 3);
    this.AddEnemy(this.Wave12, Real2(11, -6), this.ENEMYBASIC, 2, 23, 3);
    this.AddEnemy(this.Wave12, Real2(11, 6), this.ENEMYBASIC, 2, 27, 3);
    this.AddEnemy(this.Wave12, Real2(11, -3), this.ENEMYBURST, 2, 21, 3);
    this.AddEnemy(this.Wave12, Real2(11, 3), this.ENEMYBURST, 2, 19, 3);
    this.AddEnemy(this.Wave12, Real2(13, -4.5), this.ENEMYSPREAD, 27, 0, 3);
    this.AddEnemy(this.Wave12, Real2(13, 4.5), this.ENEMYSPREAD, 26, 0, 3);
    this.AddEnemy(this.Wave12, Real2(10, 0), this.ENEMYBASIC, 2, 22, 3);
    this.AddEnemy(this.Wave12, Real2(13, -2), this.ENEMYBURST, 2, 29, 3);
    this.AddEnemy(this.Wave12, Real2(13, 2), this.ENEMYBURST, 2, 26, 3);
    
    //Wave13
    
    this.AddEnemy(this.Wave13, Real2(9.80, 0), this.ENEMYSPREAD, 2, 7, 3);
    this.AddEnemy(this.Wave13, Real2(12.5, -2.5), this.ENEMYBURST, 2, 19, 3);
    this.AddEnemy(this.Wave13, Real2(7, -2.5), this.ENEMYBURST, 2, 9, 3);
    this.AddEnemy(this.Wave13, Real2(6.5, 0), this.ENEMYBURST, 2, 13, 3);
    this.AddEnemy(this.Wave13, Real2(6.75,1.25), this.ENEMYBURST, 2, 21, 3);
    this.AddEnemy(this.Wave13, Real2(6.75,-1.25), this.ENEMYBURST, 2, 12, 3);
    this.AddEnemy(this.Wave13, Real2(7.25,3.75), this.ENEMYBURST, 2, 23, 3);
     this.AddEnemy(this.Wave13, Real2(7.25, -3.75), this.ENEMYBURST, 2, 34, 3);
    this.AddEnemy(this.Wave13, Real2(12.5, 2.5), this.ENEMYBURST, 2, 23, 3);
    this.AddEnemy(this.Wave13, Real2(7, 2.5), this.ENEMYBURST, 2, 25, 3);
    this.AddEnemy(this.Wave13, Real2(9.80, -5), this.ENEMYBASIC, 2, 26, 3);
    this.AddEnemy(this.Wave13, Real2(9.80, 5), this.ENEMYBASIC, 2, 21, 3);
    this.AddEnemy(this.Wave13, Real2(11.5, 7), this.ENEMYSPREAD, 2, 8, 3);
    this.AddEnemy(this.Wave13, Real2(11.5, -7), this.ENEMYSPREAD, 2, 19, 3);
    
    //wave 14
    
    this.AddEnemy(this.Wave14, Real2(12, -6), this.ENEMYSPREAD, 2, 13, 3);
    this.AddEnemy(this.Wave14, Real2(12, 6), this.ENEMYSPREAD, 2, 16, 3);
    
    this.AddEnemy(this.Wave14, Real2(8, 3), this.ENEMYSPREAD, 2, 17, 3);
    this.AddEnemy(this.Wave14, Real2(8, -3), this.ENEMYSPREAD, 2, 23, 3);
    this.AddEnemy(this.Wave14, Real2(11, -4.5), this.ENEMYBURST, 2, 12, 3);
    this.AddEnemy(this.Wave14, Real2(11, 4.5), this.ENEMYBURST, 2, 19, 3);
    this.AddEnemy(this.Wave14, Real2(14, 0), this.ENEMYBASIC, 2, 15, 3);
    
    
    //wave 15
  
    this.AddEnemy(this.Wave15, Real2(12, 0), this.ENEMYSPREAD, 2, 14, 3);
    this.AddEnemy(this.Wave15, Real2(10, 0), this.ENEMYBASIC, 2, 24, 3);
    this.AddEnemy(this.Wave15, Real2(8, 0), this.ENEMYBASIC, 2, 13, 3);
    this.AddEnemy(this.Wave15, Real2(9, 3), this.ENEMYBURST, 2, 25, 3);
    this.AddEnemy(this.Wave15, Real2(9, -3), this.ENEMYBURST, 2, 26, 3);
    this.AddEnemy(this.Wave15, Real2(10, 0), this.ENEMYBASIC, 2, 24, 3);
    this.AddEnemy(this.Wave15, Real2(12, 6), this.ENEMYBASIC, 2, 18, 3);
    this.AddEnemy(this.Wave15, Real2(12, -6), this.ENEMYBASIC, 2, 19, 3);
    this.AddEnemy(this.Wave15, Real2(14, 0), this.ENEMYTRACKER, 2,100, 3);
    this.AddEnemy(this.Wave15, Real2(11, 2), this.ENEMYBASIC, 2, 20, 3);
    this.AddEnemy(this.Wave15, Real2(11, -2), this.ENEMYBASIC, 2, 10, 3);
    this.AddEnemy(this.Wave15, Real2(11, -4), this.ENEMYBASIC, 2, 23, 3);
    this.AddEnemy(this.Wave15, Real2(11, 4), this.ENEMYBASIC, 2, 13, 3);


    //wave 16
    
    this.AddEnemy(this.Wave16, Real2(12, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(8, 0), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(12, 5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(12, -5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(14, 2.5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(14, -2.5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(11, 7), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave16, Real2(11, -7), this.ENEMYBURST, 2, 0, 3);
    
    //wave 17
    
    this.AddEnemy(this.Wave17, Real2(14, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(8, 7), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(8, -7), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(11, -3.5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(11, 3.5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(11, 0), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(8, 0), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(8, 2), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave17, Real2(8, -2), this.ENEMYBURST, 2, 0, 3);

    
    //wave 18 AKA WHAT THE HELL'S GOING ON CAN SOMEONE TELL ME PLEASE
    
    this.AddEnemy(this.Wave18, Real2(13, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(13, 5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(13, -5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(13, 2.5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(13, -2.5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(13, -7.25), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(13, 7.25), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, 0), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, 5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, -5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, 2.5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, -2.5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, -7.25), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave18, Real2(16, 7.25), this.ENEMYTRACKER, 2, 0, 3);
    
    //wave 19
    
    this.AddEnemy(this.Wave19, Real2(13, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(12, 1), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(12, -1), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(11.5, -0.05), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(15, 3), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(15, -3), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(15, 6), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(15, -6), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(15, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(12, 3), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(12, -3), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave19, Real2(10, 0), this.ENEMYTRACKER, 2, 0, 3);
    
    
    //wave20
    
    this.AddEnemy(this.Wave20, Real2(15, 0), this.ENEMYBURST, 2, 120, 3);
    this.AddEnemy(this.Wave20, Real2(15, 4), this.ENEMYBURST, 2, 120, 3);
    this.AddEnemy(this.Wave20, Real2(15, -4), this.ENEMYBURST, 2, 120, 3);
    this.AddEnemy(this.Wave20, Real2(15, 7), this.ENEMYBURST, 2, 120, 3);
    this.AddEnemy(this.Wave20, Real2(15, -7), this.ENEMYBURST, 2, 120, 3);
    this.AddEnemy(this.Wave20, Real2(13, 2), this.ENEMYBASIC, 2, 90, 3);
    this.AddEnemy(this.Wave20, Real2(13, -2), this.ENEMYBASIC, 2, 90, 3);
    this.AddEnemy(this.Wave20, Real2(13, 6), this.ENEMYBASIC, 2, 90, 3);
    this.AddEnemy(this.Wave20, Real2(13, -6), this.ENEMYBASIC, 2, 90, 3);
    this.AddEnemy(this.Wave20, Real2(11, 0), this.ENEMYTRACKER, 2, 60, 3);
    this.AddEnemy(this.Wave20, Real2(11, 4), this.ENEMYTRACKER, 2, 60, 3);
    this.AddEnemy(this.Wave20, Real2(11, -4), this.ENEMYTRACKER, 2, 60, 3);
    this.AddEnemy(this.Wave20, Real2(9, 2), this.ENEMYSPREAD, 2, 30, 3);
    this.AddEnemy(this.Wave20, Real2(9, -2), this.ENEMYSPREAD, 2, 30, 3);
    this.AddEnemy(this.Wave20, Real2(7, 0), this.ENEMYNOSHOOT, 2, 0, 3);
    
    //wave 21
    
    this.AddEnemy(this.Wave21, Real2(3, 0), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(4, 1), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(4, -1), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(8, -5), this.ENEMYTRACKER, 2, 0 , 3);
    this.AddEnemy(this.Wave21, Real2(9, -4), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(9, -6), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(11, -5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(8, 5), this.ENEMYTRACKER, 2, 0 , 3);
    this.AddEnemy(this.Wave21, Real2(9, 4), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(9, 6), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(11, 5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave21, Real2(5, 0), this.ENEMYSPREAD, 2, 0, 3);
    
    //22
    
    this.AddEnemy(this.Wave22, Real2(9, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(7, 0), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(8, 4), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(8, -4), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(7.5, -2), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(7.5, 2), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(9, -6), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(9, 6), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(11, 6), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(11, -6), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(15, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(15, -7), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave22, Real2(15, 7), this.ENEMYSPREAD, 2, 0, 3);
    
    //23
    
    this.AddEnemy(this.Wave23, Real2(7, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(9, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(15, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(9, 2), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(9, -2), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, 2), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, -2), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, 4), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, -4), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, 6), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(11, -6), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(15, 3), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave23, Real2(15, -3), this.ENEMYTRACKER, 2, 0, 3);
    
    //24
    
    this.AddEnemy(this.Wave24, Real2(6, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(10, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, 2), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, -2), this.ENEMYTRACKER, 2, 0, 3);
    
    this.AddEnemy(this.Wave24, Real2(12, 5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(14, 5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(16, 5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(14, 7), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(14, 3), this.ENEMYTRACKER, 2, 0, 3);
    
    this.AddEnemy(this.Wave24, Real2(12, -5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(14, -5), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(16, -5), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(14, -7), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(14, -3), this.ENEMYTRACKER, 2, 0, 3);
    
    this.AddEnemy(this.Wave24, Real2(7, -6), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, -5), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, -7), this.ENEMYBURST, 2, 0, 3);
    
    this.AddEnemy(this.Wave24, Real2(7, 6), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, 5), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave24, Real2(8, 7), this.ENEMYBURST, 2, 0, 3);
    
    //25
    this.AddEnemy(this.Wave25, Real2(6, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(9, -2), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(9, 2), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(9, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(13, 7), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(13, -7), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(13, 3.5), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(13, -3.5), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(13, 0), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(4, 0), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(5, 2), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(5, -2), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(6, 4), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave25, Real2(6, -4), this.ENEMYBASIC, 2, 0, 3);
    
    //26
    
    this.AddEnemy(this.Wave26, Real2(9, 1), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(11, 1), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(9, -1), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(11, -1), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(7, 3), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(13, 3), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(7, -3), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(13, -3), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(5, 5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(15, 5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(5, -5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(15, -5), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(3, 7), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(17, 7), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(3, -7), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave26, Real2(17, -7), this.ENEMYBURST, 2, 0, 3);
    
    //27
    
    this.AddEnemy(this.Wave27, Real2(5, 0), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(7, 2), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(7, -2), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(8, 0), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, 0), this.ENEMYBURST, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(14, 0), this.ENEMYBASIC, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, 2), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, -2), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(9, 4), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(9, -4), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, 6), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, -6), this.ENEMYSPREAD, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, 4), this.ENEMYTRACKER, 2, 0, 3);
    this.AddEnemy(this.Wave27, Real2(11, -4), this.ENEMYTRACKER, 2, 0, 3);
    

    this.CheckWaveCompletion();
  }
  
  function CheckWaveCompletion(){
    if (!this.GameSession.GlobalVariables.DoTutorial) {
      if(this.CurrentWave == -1) this.CurrentWave+=this.TUTORIAL_WAVE_COUNT;
      if(this.EnemiesLeft == 0){
        this.CurrentlyInWave = false;
        this.NextWave();        
      }
    } else {
      if (this.GameSession.GlobalVariables.BeginTutorial) { // THIS MUST ONLY RUN ONCE
        this.TutController = this.Space.CreateAtPosition(Archetype.TutorialController, Real3(0,0,1));
        this.TutController.TutorialController.WaveSpawn = this.Owner;
        this.GameSession.GlobalVariables.BeginTutorial = false;
      }
      if(this.EnemiesLeft == 0){
        this.CurrentlyInWave = false;
        this.TutController.TutorialController.AdvanceText();
      }
    }
  }
  
  function EnemyDestroyed(which : Cog){
    if(!this.GameSession.GlobalVariables.DoTutorial) {
      if(this.CurrentMode == WaveType.Rush) return;
      if(this.EnemiesLeft == 1){
        this.LastEnemyCoords = this.CurrentEnemies[this.CurrentEnemies.FindFirstIndex(which)].Transform.Translation.XY;
      }
    }
    this.CurrentEnemies.RemoveFirst(which);
    --this.EnemiesLeft;
    this.CheckWaveCompletion();
  }
  
  function OnLogicUpdate(event : UpdateEvent){
    if(this.CurrentMode == WaveType.Normal) return;
    
    if(this.CurrentWave == this.TotalWaves) this.WinGame();
    
    ++this.CurrentFrame;
    if(this.CurrentFrame%this.RushModeDelay == 0){
      if (this.CurrentWave > this.Waves.LastIndex) this.SummonWave(this.Waves.LastIndex);
      else this.SummonWave(this.CurrentWave);
      ++this.CurrentWave;
      
    }
    
    
  }
  
  function EnterRushMode(){
    this.CurrentMode = WaveType.Rush;
    this.CurrentWave = 0;
    
  }
}
