class TutorialController : ZilchComponent {
  
  var WaveSpawn : Cog;
  var TutObject : Cog;
  var CurrentPhase : TutorialPhase = TutorialPhase.Init;
  var CurrentFrame = 0;
  var CurrentWave : Integer = -1;
  
  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function AdvanceText(){
    if(this.CurrentPhase == TutorialPhase.Init){
      this.TutObject = this.Space.CreateAtPosition(Archetype.TutorialObject, Real3(0, 5, 1));
      this.TutObject.TutorialText.TutorialController = this;
      this.CurrentPhase = TutorialPhase.Move;
      return;
    }
    if(this.CurrentPhase == TutorialPhase.Move){
      this.CurrentPhase = TutorialPhase.Shoot;
      this.TutObject.TutorialText.HasChanged = false;
      return;
    }
    else if(this.CurrentPhase == TutorialPhase.Shoot){
      this.CurrentPhase = TutorialPhase.Enemy;
      ++this.CurrentWave;
      this.WaveSpawn.WaveSpawner.SummonWave(this.CurrentWave);
      this.TutObject.TutorialText.HasChanged = false;
      return;
    }
    else if(this.CurrentPhase == TutorialPhase.Enemy){
      Console.WriteLine("YEET");
      this.CurrentPhase = TutorialPhase.ChangeWeaponBomb;
      ++this.CurrentWave;
      this.WaveSpawn.WaveSpawner.SummonWave(this.CurrentWave);
      this.TutObject.TutorialText.HasChanged = false;
      return;
    }
    else if(this.CurrentPhase == TutorialPhase.ChangeWeaponBomb){
      this.CurrentPhase = TutorialPhase.ChangeWeaponTrack;
      ++this.CurrentWave;
      this.WaveSpawn.WaveSpawner.SummonWave(this.CurrentWave);
      this.TutObject.TutorialText.HasChanged = false;
      return;
    }
    else if(this.CurrentPhase == TutorialPhase.ChangeWeaponTrack){
      this.CurrentPhase = TutorialPhase.Final;
      this.TutObject.TutorialText.HasChanged = false;
      return;
    }
    else if(this.CurrentPhase == TutorialPhase.Final){
      this.GameSession.GlobalVariables.DoTutorial = false;
      this.TutObject.TutorialText.HasChanged = false;
      this.WaveSpawn.WaveSpawner.EnemiesLeft = 0;
      this.WaveSpawn.WaveSpawner.CheckWaveCompletion();
      this.Owner.Destroy();
    }
  }
  function OnLogicUpdate(event : UpdateEvent) {
    //++this.CurrentFrame;
    //if(this.CurrentFrame % 300 == 1) this.AdvanceText(); //workaround until proper moving forward is in
  }
}
