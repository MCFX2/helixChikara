class ManagePlayerHealth : ZilchComponent {
  
  [Property] var PlayerHealth : Real = 100;
  [Property] var InitialPosition : Real3 = Real3(-12, 9.5, 0);
  [Property] var GameOver : Level;
  [Property] var NearMissBox : CogPath;
  
  var HealthIcons : Array[Cog] = Array[Cog]();
  
  function CreateHealthBar() {
    var healthIcon : Cog = null;
    var coords : Real3 = this.InitialPosition;
    for (var i : Integer = 0; i<this.PlayerHealth; ++i) {
      healthIcon = this.Space.CreateAtPosition(Archetype.HealthIcon, coords);
      this.HealthIcons.Add(healthIcon);
      coords += Real3(1, 0, 0);
    }
  }
  
  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollide);
    this.GameSession.GlobalVariables.Score = 0;
    this.CreateHealthBar();
  }

  function OnLogicUpdate(event : UpdateEvent) {
    if (this.PlayerHealth <= 0) {
      // Ideally we want a destruction animation to play before the Game Over Screen
      this.GameSession.GlobalVariables.CheckHighScore();
      this.Space.LoadLevel(this.GameOver);
    }
  }
  
  function OnCollide(event : CollisionEvent) {
    // Same basic structure as EnemyTakeDown
    if (!this.Owner.PlayerInvincibilityFrames.IsInvincible) {
      if (event.OtherObject.Collider.CollisionGroup == CollisionGroup.EnemyPierce ||
          event.OtherObject.Collider.CollisionGroup == CollisionGroup.KillEverything) {
        this.NearMissBox.NearMissTrigger.NearMissFailed();
        if (event.OtherObject.Archetype == Archetype.EnemyBulletBasic) {
          this.PlayerHealth -= 1;
        } else if (event.OtherObject.Archetype == Archetype.MachoShrapnel){
          this.PlayerHealth -= 1;
        } else if (event.OtherObject.Archetype == Archetype.EnemyBulletSpread){
          this.PlayerHealth -= 1;
        } else if (event.OtherObject.Archetype == Archetype.EnemyBulletTracking){
          this.PlayerHealth -= 1;
        }  
        Console.WriteLine(this.PlayerHealth);
        this.Owner.PlayerInvincibilityFrames.IsInvincible = true;
        this.NearMissBox.Sprite.Visible = false;
        if (this.HealthIcons.Count > 0) {
          this.HealthIcons[this.HealthIcons.LastIndex].Destroy();
          this.HealthIcons.RemoveAt(this.HealthIcons.LastIndex);
          foreach (var heart in this.HealthIcons) {
            heart.Sprite.SpriteSource = SpriteSource.Heart001;
            heart.HeartChangeFrame.HasChanged = true;
          }
        }
      
        this.Owner.SimpleSound.Play();
        
        //we need invincibility frames
      }
    }
  }
  
}
