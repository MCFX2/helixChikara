class ManagePlayerHealth : ZilchComponent {
  
  [Property] var PlayerHealth : Real = 100;
  [Property] var InitialPosition : Real3 = Real3(-12, 9.25, 1);
  [Property] var GameOver : Level;
  [Property] var NearMissBox : CogPath;
  
  var Rand : Random = Random();
  var HealthIcons : Array[Cog] = Array[Cog]();
  var HasDied : Boolean;
  
  function CreateHealthBar() {
    var healthIcon : Cog = null;
    var coords : Real3 = this.InitialPosition;
    for (var i : Integer = 0; i<this.PlayerHealth; ++i) {
      healthIcon = this.Space.CreateAtPosition(Archetype.HealthIcon, coords);
      this.HealthIcons.Add(healthIcon);
      coords += Real3(1.1, 0, 0);
    }
  }
  
  function SpawnParticles (coords : Real3) {
    var angle : Real = 0;
    var ex : Cog = null;
    var magRand : Random = Random();
    var mag : Real = 0;
    for (var i : Integer = 0; i<24; ++i) {
      mag = magRand.Range(1, 15);
      angle+=(i*(Math.Pi/12));
      var x = this.Space.CreateAtPosition(Archetype.EnemyExplosion, coords);
      x.RigidBody.Velocity = Real3(mag*Math.Cos(angle), mag*Math.Sin(angle), 0);
      x.Transform.Rotation = this.Rand.Rotation();
    }
  }
  
  function AddToHealthBar(health : Integer) {
    for (var i : Integer = 1; i<=health; ++i) {
      var lastHealth : Cog = this.HealthIcons.Get(this.HealthIcons.LastIndex);
      var coords = Real3(1.1, 0, 0);
      coords += lastHealth.Transform.Translation;
      var healthIcon : Cog = this.Space.CreateAtPosition(Archetype.HealthIcon, coords);
      this.HealthIcons.Add(healthIcon);
      ++this.PlayerHealth;
    }
  }
  
  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollide);
    this.GameSession.GlobalVariables.Score = 0;
    this.CreateHealthBar();
    this.HasDied = false;
  }

  function OnLogicUpdate(event : UpdateEvent) {
    if (this.PlayerHealth <= 0) {
      if (!this.HasDied) {
        var coords = this.Owner.Transform.Translation;
        // Ideally we want a destruction animation to play before the Game Over Screen
        this.Owner.Sprite.Visible = false;
        this.SpawnParticles(coords);
        this.Owner.DelayedAction.IsActive = true;
        this.HasDied = true;
      }
    }
    if (this.Owner.DelayedAction.HasFinished) {
      this.Die();
    }
  }
  
  function Die() {
    var tempSpace : Space = this.GameSession.CreateSpace(Archetype.Space);
    this.Space.Destroy();
    this.GameSession.GlobalVariables.BGMSoundSpace.Destroy();
    
    tempSpace.LoadLevel(this.GameOver);
  }
  
  function OnCollide(event : CollisionEvent) {

    // Same basic structure as EnemyTakeDown
    if (!this.Owner.PlayerInvincibilityFrames.IsInvincible) {
      if (event.OtherObject.Collider.CollisionGroup == CollisionGroup.EnemyPierce ||
          event.OtherObject.Collider.CollisionGroup == CollisionGroup.KillEverything) {
        this.NearMissBox.NearMissTrigger.NearMissFailed();
        this.PlayerHealth -= 1;
        this.Owner.PlayerInvincibilityFrames.IsInvincible = true;
        this.NearMissBox.Sprite.Visible = false;
        
        this.Owner.ScreenShake.Activate();
        
        this.Owner.WavePerfect.FailAttempt();
        
        if (this.HealthIcons.Count > 0) {
          this.HealthIcons[this.HealthIcons.LastIndex].Destroy();
          this.HealthIcons.RemoveAt(this.HealthIcons.LastIndex);
          foreach (var heart in this.HealthIcons) {
            heart.Sprite.SpriteSource = SpriteSource.Heart001;
            heart.HeartChangeFrame.HasChanged = true;
          }
        }
      
        this.Owner.SimpleSound.Play();
      } else if (event.OtherObject.Collider.CollisionGroup == CollisionGroup.ItemPickup) {
        if (event.OtherObject.ItemPickupProperties.State == ItemTypes.Health && this.PlayerHealth<5) {
          this.AddToHealthBar(1);
        } else if (event.OtherObject.ItemPickupProperties.State == ItemTypes.Shield) {
          //its just worth points, sorry
          this.GameSession.GlobalVariables.AddToScore((this.GameSession.GlobalVariables.Score * 0.01) as Integer * 10);
        }
        event.OtherObject.Destroy();
      }
    }
  }
  
}
