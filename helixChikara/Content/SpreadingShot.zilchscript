class SpreadingShot : ZilchComponent
{
  [Property] var Player : CogPath = CogPath(":/Screen/User/PlayerHitbox");
  [Property] var SpreadAng : Real = 0.02;
  [Property] var FanSize : Integer = 10;
  [Property] var BulletVelocity = 5.0;
  var PlayerPosAtInit : Real3 = Real3(0);
  var InstantiatedPos : Real3 = Real3(0);
  var BaseVel : Real = 8;
  
  function Initialize(init : CogInitializer)
  {
    this.PlayerPosAtInit = this.Player.Cog.Transform.Translation;
    this.InstantiatedPos = this.Owner.Transform.Translation;
    
    var x = Math.Abs(this.PlayerPosAtInit.X - this.InstantiatedPos.X);
    var y = Math.Abs(this.PlayerPosAtInit.Y - this.InstantiatedPos.Y);
    
    var xdirection = 0;
    if(this.PlayerPosAtInit.X > this.InstantiatedPos.X) { xdirection = 1; }
    else { xdirection = -1; }
    var ydirection = 0;
    if(this.PlayerPosAtInit.Y > this.InstantiatedPos.Y) { ydirection = 1; }
    else { ydirection = -1; }
    var dx : Real = y/x;
    var newVel = Math.Normalize(Real2(xdirection, dx * ydirection));
    this.Owner.RigidBody.Velocity = Real3(newVel * this.BaseVel, 0);
    this.Owner.Orientation.LookAtPoint(this.PlayerPosAtInit);
    
    /*
    var velY = Math.Pow(this.BulletSpeedAnime, 2) * Math.Sin(Math.ToRadians(spreadAngle));
    var velX = Math.Pow(this.BulletSpeedAnime, 2) * Math.Cos(Math.ToRadians(spreadAngle));
    currentBullet.RigidBody.Velocity = Real3(velX, velY, 0);
    */
    var baseAngle = this.Owner.Orientation.GetLookAtPointRotation(this.PlayerPosAtInit);
    
    for(var i = 0; i < this.FanSize; ++i){
      var s = this.Space.CreateAtPosition(Archetype.EnemyBulletSpreadIndirect, this.Owner.Transform.Translation);
      //s.SpreadingShotChild.UpdateTargetAngle(Math.ToQuaternion(0, 0, ));
      var velY = Math.Pow(this.BulletVelocity, 2) * Math.Sin(i * this.SpreadAng);
      var velX = Math.Pow(this.BulletVelocity, 2) * Math.Cos(i * this.SpreadAng);
      s.RigidBody.Velocity = Real3(velX, velY, 0);
      
      var s2 = this.Space.CreateAtPosition(Archetype.EnemyBulletSpreadIndirect, this.Owner.Transform.Translation);
      var velY2 = Math.Pow(this.BulletVelocity, 2) * Math.Sin(-1 * i * this.SpreadAng);
      var velX2 = Math.Pow(this.BulletVelocity, 2) * Math.Cos(-1 * i * this.SpreadAng);
      s.RigidBody.Velocity = Real3(velX2, velY2, 0);
      //s.SpreadingShotChild.SetTargetAngle(this.Owner.Orientation.GetLookAtPointRotation(this.PlayerPosAtInit) + Math.ToQuaternion(Real3(0, 0, this.SpreadAng)));
      
      
    }
  }

}
