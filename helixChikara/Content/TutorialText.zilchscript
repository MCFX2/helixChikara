class TutorialText : ZilchComponent {
  
  [Property] var SecondsBeforeDeath : Integer = 5;
  [Property] var TextChangeTime : Integer = 5;
  [Property] var TutorialController : TutorialController;

  var CurrentFrame = 0;
  var AutoSequence = false;
  var HasChanged = false;
  var EndTutorial = false;
  
  function Initialize(init : CogInitializer) {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }
  
  function ControlBasedText(moveMethod : ControlTypes, keyboard : SpriteSource, mouse : SpriteSource, gamepad : SpriteSource) : SpriteSource {
    if(moveMethod == ControlTypes.Keyboard){
      return keyboard;
    }
    if(moveMethod == ControlTypes.Mouse){
      return mouse;
    }
    if(moveMethod == ControlTypes.GamePad){
      return gamepad;
    }
    return null;
  }
  
  function ControlBasedText(moveMethod : ControlTypes, keyboard : String, mouse : String, gamepad : String) : String {
    if(moveMethod == ControlTypes.Keyboard){
      return keyboard;
    }
    if(moveMethod == ControlTypes.Mouse){
      return mouse;
    }
    if(moveMethod == ControlTypes.GamePad){
      return gamepad;
    }
    return null;
  }
  
  function CenterText(center : Boolean) {
    if (center) this.Owner.Children.Current.Transform.Translation = Real3(0, 0, 0);
    else this.Owner.Children.Current.Transform.Translation = Real3(0, -0.6, 0);
  }
  
  function ToggleSprite() {
    if (this.Owner.Sprite.Visible == true) this.Owner.Sprite.Visible = false;
    else this.Owner.Sprite.Visible = true;
  }

  function OnLogicUpdate(event : UpdateEvent) {
    var inferredMoveMethod = this.GameSession.GlobalVariables.ControlType;
    if (!this.HasChanged) {
      if(this.TutorialController.CurrentPhase == TutorialPhase.Move) {
        this.Owner.Sprite.SpriteSource = this.ControlBasedText(inferredMoveMethod,
          null,
          SpriteSource.Mouse_Move_Tut,
          SpriteSource.Cont_Move_Tut);
        this.Owner.Children.Current.SpriteText.Text = this.ControlBasedText(inferredMoveMethod,
          "Use WASD to move",
          "The ship follows your mouse",
          "Use the left joystick to move");
        if (inferredMoveMethod == ControlTypes.Keyboard) {
          this.ToggleSprite();
          this.CenterText(true);
        }
        this.AutoSequence = true;
        this.HasChanged = true;
      }
      
      if(this.TutorialController.CurrentPhase == TutorialPhase.Shoot) {
        this.Owner.Sprite.SpriteSource = this.ControlBasedText(inferredMoveMethod,
          null,//"Press SPACE to shoot",
          SpriteSource.Mouse_Shoot_Tut,//"Click to shoot",
          SpriteSource.Cont_Shoot_Tut);
        this.Owner.Children.Current.SpriteText.Text = this.ControlBasedText(inferredMoveMethod,
          "Press SPACE to shoot",
          "Click to shoot",
          "A,B and triggers shoot");
        this.AutoSequence = true;
        this.HasChanged = true;
      }
      
      if(this.TutorialController.CurrentPhase == TutorialPhase.Enemy) {
        if (inferredMoveMethod != ControlTypes.Keyboard) {
          this.ToggleSprite();
          this.CenterText(true);
        }
        this.Owner.Children.Current.SpriteText.Text = "A harmless enemy has appeared. Kill it.";
        this.HasChanged = true;
      }

      if(this.TutorialController.CurrentPhase == TutorialPhase.ChangeWeaponBomb) {
        if (inferredMoveMethod == ControlTypes.GamePad) {
          this.ToggleSprite();
          this.CenterText(false);
        }
        this.Owner.Sprite.SpriteSource = this.ControlBasedText(inferredMoveMethod,
          null,
          null,
          SpriteSource.Cont_Swap_Tut);
        this.ToggleSprite();
        this.Owner.Children.Current.SpriteText.Text = this.ControlBasedText(inferredMoveMethod,
          "A bunch of harmless enemies.\nIt's better to use Reagan's weapon, try switching to it with 2\nBe warned, bomb frags can hurt you!",
          "A bunch of harmless enemies.\nIt's better to use Reagan's weapon, try switching to it with 2\nBe warned, bomb frags can hurt you!",
          "A bunch of harmless enemies.\nIt's better to use Reagan's weapon, try switching to it with X, Y, or a shoulder button\nBe warned, bomb frags can hurt you!");
        if (inferredMoveMethod == ControlTypes.GamePad) this.CenterText(false);
        this.HasChanged = true;
      }
      
      if(this.TutorialController.CurrentPhase == TutorialPhase.ChangeWeaponTrack) {
        if (inferredMoveMethod == ControlTypes.GamePad) {
          this.ToggleSprite();
        }
        this.CenterText(true);
        this.Owner.Children.Current.SpriteText.Text = this.ControlBasedText(inferredMoveMethod,
          "This one's not so harmless.\nTry using Scout's weapon (3)",
          "This one's not so harmless.\nTry using Scout's weapon (3)",
          "This one's not so harmless.\nTry using Scout's weapon (X, Y, or shoulder again)");
        if (inferredMoveMethod == ControlTypes.GamePad) this.CenterText(true);
        this.HasChanged = true;
      }
      
      if(this.TutorialController.CurrentPhase == TutorialPhase.NearMiss){
        this.Owner.Children.Current.SpriteText.Text = "One last thing.\nIf you just barely miss an enemy bullet,\n you will get a 'Near Miss' point bonus!";
        this.HasChanged = true;
        this.AutoSequence = true;      
      }
      
      if(this.TutorialController.CurrentPhase == TutorialPhase.Final){
        this.Owner.Children.Current.SpriteText.Text = "You got it now, Good luck";
        this.HasChanged = true;
        this.EndTutorial = true;
      }
    }
    if(this.AutoSequence) {
      ++this.CurrentFrame;
      if(this.CurrentFrame >= this.SecondsBeforeDeath*60) {
        this.AutoSequence = false;
        this.CurrentFrame = 0;
        this.TutorialController.AdvanceText();
      }
    }
    if (this.EndTutorial) {
      ++this.CurrentFrame;
      if(this.CurrentFrame >= this.TextChangeTime*60) {
        this.TutorialController.AdvanceText();
        this.Owner.Destroy();
      }
    }
    
  }
}
